---
description: E-commerce specific components and patterns for Next.js + Firebase
globs: "**/components/**"
alwaysApply: false
---
# E-commerce Component Patterns for Next.js + Firebase

This document outlines patterns for creating common e-commerce components using Next.js (App Router, Server & Client Components), Firebase for data, Shadcn/UI, and Tailwind CSS.

## General Principles

-   **Server Components by Default:** Fetch initial data in Server Components where possible.
-   **Client Components for Interactivity:** Use `'use client'` for components requiring hooks, event handlers, or state (e.g., add to cart buttons, quantity selectors, forms).
-   **Data Fetching:**
    -   Server Components: Directly call Firebase Admin SDK services.
    -   Client Components: Use custom hooks (`useProducts`, `useCart` etc.) that might internally use Firebase Client SDK or SWR to fetch from API routes.
-   **Styling:** Use Tailwind CSS utility classes. Leverage Shadcn/UI components as a base and customize them.
-   **Type Safety:** Use TypeScript and define clear props for all components (refer to `typescript-types.mdc`).
-   **Error Handling & Loading States:** Implement appropriate loading spinners/skeletons and error messages.

## 1. Product Components

### ProductCard Component (`src/components/features/ProductCard.tsx`)

Displays a single product with an image, name, price, and an add-to-cart button.

```typescript
// Example: src/components/features/ProductCard.tsx
'use client'; // If it has interactive elements like an Add to Cart button handled client-side

import Image from 'next/image';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Product } from '@/types/firebase'; // Your Product type
import { useCart } from '@/hooks/useCart'; // Example hook
import { ShoppingCart, Heart } from 'lucide-react';
import { toast } from 'sonner'; // Or your preferred toast library

interface ProductCardProps {
  product: Product;
  // onToggleWishlist?: (productId: string) => void;
  // isInWishlist?: boolean;
}

export function ProductCard({ product /*, onToggleWishlist, isInWishlist */ }: ProductCardProps) {
  const { addToCart, loading: cartLoading } = useCart(); // Assuming useCart provides addToCart and loading state

  const handleAddToCart = async () => {
    if (!product || product.stock === 0) return;
    try {
      await addToCart(product.id, 1);
      toast.success(`${product.name} added to cart!`);
    } catch (error) {
      console.error("Failed to add to cart:", error);
      toast.error("Could not add to cart. Please try again.");
    }
  };

  const discountPercentage = product.originalPrice && product.originalPrice > product.price
    ? Math.round(((product.originalPrice - product.price) / product.originalPrice) * 100)
    : 0;

  return (
    <div className="group relative border rounded-lg overflow-hidden shadow-sm hover:shadow-lg transition-shadow duration-300 bg-white">
      <Link href={`/products/${product.id}`} className="block">
        <div className="relative w-full h-48 sm:h-60 overflow-hidden">
          <Image
            src={product.images[0] || '/placeholder-image.png'} // Ensure you have a placeholder
            alt={product.name}
            fill
            sizes="(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 33vw"
            className="object-cover group-hover:scale-105 transition-transform duration-300"
            priority={false} // Set to true for above-the-fold critical images
          />
        </div>
      </Link>

      {discountPercentage > 0 && (
        <Badge variant="destructive" className="absolute top-2 left-2">
          {discountPercentage}% OFF
        </Badge>
      )}
      {/* Wishlist button can be added similarly here */}

      <div className="p-4 space-y-2">
        <h3 className="text-md font-semibold truncate text-gray-800 group-hover:text-blue-600">
          <Link href={`/products/${product.id}`}>{product.name}</Link>
        </h3>
        {/* Optional: Short description or category */}
        {/* <p className="text-sm text-gray-500 truncate">{product.categoryName || product.category}</p> */}
        <div className="flex items-center justify-between gap-2">
          <div className="flex items-baseline gap-1">
            <span className="text-lg font-bold text-gray-900">₹{product.price.toLocaleString()}</span>
            {product.originalPrice && product.originalPrice > product.price && (
              <span className="text-sm text-gray-500 line-through">₹{product.originalPrice.toLocaleString()}</span>
            )}
          </div>
          {/* Optional: Rating stars */}
        </div>
        <Button
          onClick={handleAddToCart}
          disabled={cartLoading || product.stock === 0}
          className="w-full mt-2"
          size="sm"
        >
          <ShoppingCart className="mr-2 h-4 w-4" />
          {product.stock === 0 ? 'Out of Stock' : (cartLoading ? 'Adding...' : 'Add to Cart')}
        </Button>
      </div>
    </div>
  );
}
```

### ProductGrid Component (`src/components/features/ProductGrid.tsx`)

Displays a list of products using `ProductCard`.

```typescript
// Example: src/components/features/ProductGrid.tsx
import { Product } from '@/types/firebase';
import { ProductCard } from './ProductCard';

interface ProductGridProps {
  products: Product[];
  loading?: boolean; // For displaying skeleton loaders
}

export function ProductGrid({ products, loading }: ProductGridProps) {
  if (loading) {
    return (
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 md:gap-6">
        {Array.from({ length: 8 }).map((_, i) => (
          // Replace with your ProductCardSkeleton component
          <div key={i} className="border rounded-lg p-4 h-80 bg-gray-100 animate-pulse"></div>
        ))}
      </div>
    );
  }

  if (!products || products.length === 0) {
    return <p className="text-center text-gray-500 py-8">No products found.</p>;
  }

  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 md:gap-6">
      {products.map((product) => (
        <ProductCard key={product.id} product={product} />
      ))}
    </div>
  );
}
```

## 2. Cart Components

### CartItem Component (`src/components/features/CartItem.tsx`)

Represents a single item in the shopping cart with quantity controls.

```typescript
// Example: src/components/features/CartItem.tsx
'use client';

import Image from 'next/image';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input'; // Or custom quantity input
import { CartItem as CartItemType } from '@/types/firebase';
import { useCart } from '@/hooks/useCart';
import { X, Minus, Plus } from 'lucide-react';
import { toast } from 'sonner';
import Link from 'next/link';

interface CartItemProps {
  item: CartItemType;
}

export function CartItem({ item }: CartItemProps) {
  const { updateItemQuantity, removeItemFromCart, loading } = useCart();

  const handleQuantityChange = async (newQuantity: number) => {
    if (newQuantity < 1) {
      // Or handle removal if quantity becomes 0
      await handleRemoveItem(); 
      return;
    }
    // Add validation against product.stock if available in CartItemType or fetched
    try {
      await updateItemQuantity(item.productId, newQuantity);
      toast.info(`${item.name} quantity updated to ${newQuantity}.`);
    } catch (error) {
      toast.error("Failed to update quantity.");
    }
  };

  const handleRemoveItem = async () => {
    try {
      await removeItemFromCart(item.productId);
      toast.success(`${item.name} removed from cart.`);
    } catch (error) {
      toast.error("Failed to remove item.");
    }
  };

  return (
    <div className="flex items-start sm:items-center gap-4 py-4 border-b last:border-b-0">
      <Link href={`/products/${item.productId}`} className="flex-shrink-0">
        <div className="relative h-20 w-20 sm:h-24 sm:w-24 rounded-md overflow-hidden bg-gray-100">
          <Image
            src={item.image || '/placeholder-image.png'}
            alt={item.name}
            fill
            sizes="80px"
            className="object-cover"
          />
        </div>
      </Link>
      <div className="flex-grow">
        <Link href={`/products/${item.productId}`} className="hover:text-blue-600">
          <h3 className="text-sm sm:text-md font-medium text-gray-800">{item.name}</h3>
        </Link>
        {/* Optional: Variant info */}
        <p className="text-sm text-gray-600 mt-1">Price: ₹{item.price.toLocaleString()}</p>
        <div className="mt-2 flex items-center gap-2">
          <Button variant="outline" size="icon" className="h-7 w-7 sm:h-8 sm:w-8" onClick={() => handleQuantityChange(item.quantity - 1)} disabled={loading || item.quantity <= 1}>
            <Minus className="h-3 w-3 sm:h-4 sm:w-4" />
          </Button>
          <span className="text-sm sm:text-md font-medium w-8 text-center">{item.quantity}</span>
          <Button variant="outline" size="icon" className="h-7 w-7 sm:h-8 sm:w-8" onClick={() => handleQuantityChange(item.quantity + 1)} disabled={loading /* Add stock check */}>
            <Plus className="h-3 w-3 sm:h-4 sm:w-4" />
          </Button>
        </div>
      </div>
      <div className="text-right space-y-2 flex-shrink-0">
        <p className="text-sm sm:text-md font-semibold text-gray-800">
          ₹{(item.price * item.quantity).toLocaleString()}
        </p>
        <Button variant="ghost" size="icon" className="text-gray-500 hover:text-red-500 h-7 w-7 sm:h-8 sm:w-8" onClick={handleRemoveItem} disabled={loading}>
          <X className="h-4 w-4 sm:h-5 sm:w-5" />
        </Button>
      </div>
    </div>
  );
}
```

## 3. Checkout Components

### PaymentMethodSelector (`src/components/features/PaymentMethodSelector.tsx`)

Allows users to choose a payment method (e.g., UPI, Card).

```typescript
// Example: src/components/features/PaymentMethodSelector.tsx
'use client';

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Label } from "@/components/ui/label";
import { PaymentMethod } from "@/types/enums"; // Your PaymentMethod enum
import { CreditCard, Smartphone } from "lucide-react"; // Example icons

interface PaymentMethodSelectorProps {
  availableMethods: PaymentMethod[];
  selectedMethod: PaymentMethod | null;
  onSelectMethod: (method: PaymentMethod) => void;
}

const paymentMethodDetails = {
  [PaymentMethod.UPI]: { label: "UPI Transfer", icon: Smartphone },
  [PaymentMethod.CARD]: { label: "Credit/Debit Card", icon: CreditCard },
  [PaymentMethod.SIMULATED]: { label: "Simulated Payment (Test)", icon: CreditCard }, // Example for testing
  // Add other methods as needed
};

export function PaymentMethodSelector({ availableMethods, selectedMethod, onSelectMethod }: PaymentMethodSelectorProps) {
  return (
    <Card>
      <CardHeader>
        <CardTitle>Select Payment Method</CardTitle>
      </CardHeader>
      <CardContent>
        <RadioGroup
          value={selectedMethod || undefined}
          onValueChange={(value) => onSelectMethod(value as PaymentMethod)}
          className="space-y-3"
        >
          {availableMethods.map((method) => {
            const details = paymentMethodDetails[method];
            if (!details) return null; // Skip if details not defined for a method
            const IconComponent = details.icon;
            return (
              <Label
                key={method}
                htmlFor={`payment-${method}`}
                className={`flex items-center space-x-3 p-4 border rounded-md cursor-pointer transition-colors 
                            ${selectedMethod === method ? 'border-blue-500 bg-blue-50' : 'hover:border-gray-300'}`}
              >
                <RadioGroupItem value={method} id={`payment-${method}`} />
                <IconComponent className="h-6 w-6 text-gray-600" />
                <span className="font-medium text-gray-800">{details.label}</span>
              </Label>
            );
          })}
        </RadioGroup>
      </CardContent>
    </Card>
  );
}
```

### UPIPayment Component (`src/components/features/UPIPayment.tsx`)

Displays a QR code for UPI payments.

```typescript
// Example: src/components/features/UPIPayment.tsx
'use client';

import { useEffect, useState } from 'react';
import QRCode from 'qrcode.react'; // Using qrcode.react, ensure it's installed
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Loader2, CheckCircle, Copy } from 'lucide-react';
import { toast } from 'sonner';

interface UPIPaymentProps {
  upiId: string; // e.g., yourname@okhdfcbank
  amount: number;
  orderId: string; // For transaction note
  payeeName?: string; // Your name or store name
  onPaymentSuccess: () => void; // Callback when user confirms they've paid
  // In a real scenario, backend would verify payment via webhooks or polling
}

export function UPIPayment({ upiId, amount, orderId, payeeName = "Store Name", onPaymentSuccess }: UPIPaymentProps) {
  const [isLoading, setIsLoading] = useState(false); // For simulating check
  const upiString = `upi://pay?pa=${upiId}&pn=${encodeURIComponent(payeeName)}&am=${amount.toFixed(2)}&cu=INR&tn=Order_${orderId}`;

  const handleCopyUpiId = () => {
    navigator.clipboard.writeText(upiId);
    toast.success("UPI ID copied to clipboard!");
  };
  
  const handleConfirmPayment = () => {
    setIsLoading(true);
    // Simulate a delay for user to make payment and for a pseudo-check
    // In a real app, this might trigger a server-side check or just proceed to next step
    // relying on backend webhooks to confirm actual payment.
    setTimeout(() => {
      setIsLoading(false);
      onPaymentSuccess(); // Assume payment will be verified by backend later
      toast.info("Payment confirmation received. We will verify and update your order status.");
    }, 3000);
  };

  return (
    <Card className="w-full max-w-md mx-auto">
      <CardHeader>
        <CardTitle>Pay using UPI</CardTitle>
        <CardDescription>Scan the QR code or use the UPI ID to pay ₹{amount.toLocaleString()}.</CardDescription>
      </CardHeader>
      <CardContent className="flex flex-col items-center space-y-6">
        <div className="p-4 border rounded-lg bg-white">
          <QRCode value={upiString} size={200} level="M" />
        </div>
        <div className="text-center">
          <p className="text-sm text-gray-600">Or pay to UPI ID:</p>
          <div className="flex items-center gap-2 mt-1">
            <p className="font-semibold text-lg text-gray-800 break-all">{upiId}</p>
            <Button variant="ghost" size="icon" onClick={handleCopyUpiId} className="h-8 w-8">
              <Copy className="h-4 w-4" />
            </Button>
          </div>
        </div>
        <Alert>
          <AlertTitle>Important!</AlertTitle>
          <AlertDescription>
            After completing the payment, click the button below. Order will be processed after payment verification.
          </AlertDescription>
        </Alert>
      </CardContent>
      <CardFooter>
        <Button onClick={handleConfirmPayment} className="w-full" disabled={isLoading}>
          {isLoading ? (
            <><Loader2 className="mr-2 h-4 w-4 animate-spin" /> Verifying...</>
          ) : (
            "I Have Paid"
          )}
        </Button>
      </CardFooter>
    </Card>
  );
}
```

## 4. Layout Components (Header, Footer, Sidebar)

Refer to general Next.js and Shadcn/UI documentation for creating layout components. Key e-commerce aspects:

-   **Header:** Include logo, navigation, search bar, cart icon (with item count from `useCart`), user profile/login link.
-   **Footer:** Links to informational pages (About Us, Contact, T&C), social media.

## 5. Form Components (AddressForm, CreditCardForm)

Use React Hook Form with Zod for validation. Refer to `typescript-types.mdc` for Zod schema examples (e.g., `shippingAddressSchema`, `creditCardSchema`).

### AddressForm (`src/components/forms/AddressForm.tsx`)

```typescript
// Example: src/components/forms/AddressForm.tsx
'use client';

import { useForm, SubmitHandler } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { ShippingAddressFormData, shippingAddressSchema } from '@/types/forms'; // Assuming your types are defined here

interface AddressFormProps {
  onSubmit: (data: ShippingAddressFormData) => Promise<void> | void;
  initialData?: Partial<ShippingAddressFormData>;
  isLoading?: boolean;
  submitButtonText?: string;
}

export function AddressForm({ onSubmit, initialData, isLoading, submitButtonText = "Save Address" }: AddressFormProps) {
  const form = useForm<ShippingAddressFormData>({
    resolver: zodResolver(shippingAddressSchema),
    defaultValues: initialData || { country: 'India' }, // Default country or other fields
  });

  const handleFormSubmit: SubmitHandler<ShippingAddressFormData> = async (data) => {
    await onSubmit(data);
    // Optionally reset form: form.reset();
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(handleFormSubmit)} className="space-y-4">
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
          <FormField
            control={form.control}
            name="firstName"
            render={({ field }) => (
              <FormItem>
                <FormLabel>First Name</FormLabel>
                <FormControl><Input placeholder="John" {...field} /></FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="lastName"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Last Name</FormLabel>
                <FormControl><Input placeholder="Doe" {...field} /></FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>
        
        <FormField
          control={form.control}
          name="email"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Email</FormLabel>
              <FormControl><Input type="email" placeholder="you@example.com" {...field} /></FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="phone"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Phone Number</FormLabel>
              <FormControl><Input type="tel" placeholder="+91 XXXXX XXXXX" {...field} /></FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="addressLine1"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Address Line 1</FormLabel>
              <FormControl><Input placeholder="123 Main St" {...field} /></FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        {/* Add fields for addressLine2, city, state, zipCode, country similarly */}

        <Button type="submit" className="w-full" disabled={isLoading}>
          {isLoading ? "Saving..." : submitButtonText}
        </Button>
      </form>
    </Form>
  );
}

```

**Note:** Always ensure components that use hooks (`useState`, `useEffect`, context consumers) are marked with `'use client'`. Data fetching for initial display can often happen in parent Server Components and be passed down as props.
