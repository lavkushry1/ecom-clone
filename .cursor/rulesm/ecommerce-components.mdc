---
description: E-commerce specific components and patterns for Next.js + Firebase
globs: "**/components/**"
alwaysApply: false
---

# E-commerce Component Patterns

## 1. Product Components

### ProductCard Component
```typescript
// components/features/ProductCard.tsx
'use client'

import Image from 'next/image';
import Link from 'next/link';
import { useState } from 'react';
import { Product } from '@/types/firebase';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Heart, ShoppingCart } from 'lucide-react';

interface ProductCardProps {
  product: Product;
  onAddToCart?: (productId: string) => void;
  onToggleWishlist?: (productId: string) => void;
  isInWishlist?: boolean;
}

export function ProductCard({ 
  product, 
  onAddToCart, 
  onToggleWishlist,
  isInWishlist = false 
}: ProductCardProps) {
  const [isLoading, setIsLoading] = useState(false);
  
  const discountPercentage = product.originalPrice 
    ? Math.round(((product.originalPrice - product.price) / product.originalPrice) * 100)
    : 0;

  const handleAddToCart = async () => {
    if (!onAddToCart) return;
    
    setIsLoading(true);
    try {
      await onAddToCart(product.id);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="group relative bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow">
      <div className="relative overflow-hidden rounded-t-lg">
        <Link href={`/products/${product.id}`}>
          <Image
            src={product.images[0] || '/placeholder.jpg'}
            alt={product.name}
            width={300}
            height={300}
            className="w-full h-48 object-cover group-hover:scale-105 transition-transform"
          />
        </Link>
        
        {discountPercentage > 0 && (
          <Badge className="absolute top-2 left-2 bg-red-500">
            -{discountPercentage}%
          </Badge>
        )}
        
        <Button
          variant="ghost"
          size="icon"
          className="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity"
          onClick={() => onToggleWishlist?.(product.id)}
        >
          <Heart className={`h-4 w-4 ${isInWishlist ? 'fill-red-500 text-red-500' : ''}`} />
        </Button>
      </div>
      
      <div className="p-4">
        <Link href={`/products/${product.id}`}>
          <h3 className="font-medium text-gray-900 hover:text-blue-600 transition-colors">
            {product.name}
          </h3>
        </Link>
        
        <div className="mt-2 flex items-center gap-2">
          <span className="text-lg font-bold text-gray-900">
            ₹{product.price.toLocaleString()}
          </span>
          {product.originalPrice && (
            <span className="text-sm text-gray-500 line-through">
              ₹{product.originalPrice.toLocaleString()}
            </span>
          )}
        </div>
        
        <Button
          className="w-full mt-3"
          onClick={handleAddToCart}
          disabled={isLoading || product.stock === 0}
        >
          {isLoading ? (
            "Adding..."
          ) : product.stock === 0 ? (
            "Out of Stock"
          ) : (
            <>
              <ShoppingCart className="h-4 w-4 mr-2" />
              Add to Cart
            </>
          )}
        </Button>
      </div>
    </div>
  );
}
```

### ProductGrid Component
```typescript
// components/features/ProductGrid.tsx
import { Product } from '@/types/firebase';
import { ProductCard } from './ProductCard';
import { useCart } from '@/hooks/useCart';
import { useWishlist } from '@/hooks/useWishlist';

interface ProductGridProps {
  products: Product[];
  loading?: boolean;
}

export function ProductGrid({ products, loading }: ProductGridProps) {
  const { addToCart } = useCart();
  const { toggleWishlist, isInWishlist } = useWishlist();

  if (loading) {
    return (
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        {[...Array(8)].map((_, i) => (
          <ProductCardSkeleton key={i} />
        ))}
      </div>
    );
  }

  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
      {products.map((product) => (
        <ProductCard
          key={product.id}
          product={product}
          onAddToCart={addToCart}
          onToggleWishlist={toggleWishlist}
          isInWishlist={isInWishlist(product.id)}
        />
      ))}
    </div>
  );
}
```

## 2. Cart Components

### CartItem Component
```typescript
// components/features/CartItem.tsx
'use client'

import Image from 'next/image';
import { useState } from 'react';
import { Minus, Plus, Trash2 } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { CartItem as CartItemType } from '@/types/firebase';

interface CartItemProps {
  item: CartItemType;
  onUpdateQuantity: (productId: string, quantity: number) => void;
  onRemove: (productId: string) => void;
}

export function CartItem({ item, onUpdateQuantity, onRemove }: CartItemProps) {
  const [isUpdating, setIsUpdating] = useState(false);

  const handleQuantityChange = async (newQuantity: number) => {
    if (newQuantity < 1) return;
    
    setIsUpdating(true);
    try {
      await onUpdateQuantity(item.productId, newQuantity);
    } finally {
      setIsUpdating(false);
    }
  };

  const handleRemove = async () => {
    setIsUpdating(true);
    try {
      await onRemove(item.productId);
    } finally {
      setIsUpdating(false);
    }
  };

  return (
    <div className="flex gap-4 p-4 border-b">
      <Image
        src={item.image || '/placeholder.jpg'}
        alt={item.name}
        width={80}
        height={80}
        className="rounded-md object-cover"
      />
      
      <div className="flex-1">
        <h4 className="font-medium text-gray-900">{item.name}</h4>
        <p className="text-sm text-gray-600 mt-1">₹{item.price.toLocaleString()}</p>
        
        <div className="flex items-center justify-between mt-3">
          <div className="flex items-center gap-2">
            <Button
              variant="outline"
              size="icon"
              className="h-8 w-8"
              onClick={() => handleQuantityChange(item.quantity - 1)}
              disabled={isUpdating || item.quantity <= 1}
            >
              <Minus className="h-3 w-3" />
            </Button>
            
            <span className="w-8 text-center font-medium">{item.quantity}</span>
            
            <Button
              variant="outline"
              size="icon"
              className="h-8 w-8"
              onClick={() => handleQuantityChange(item.quantity + 1)}
              disabled={isUpdating}
            >
              <Plus className="h-3 w-3" />
            </Button>
          </div>
          
          <Button
            variant="ghost"
            size="icon"
            className="h-8 w-8 text-red-500 hover:text-red-700"
            onClick={handleRemove}
            disabled={isUpdating}
          >
            <Trash2 className="h-4 w-4" />
          </Button>
        </div>
      </div>
      
      <div className="text-right">
        <p className="font-medium text-gray-900">
          ₹{(item.price * item.quantity).toLocaleString()}
        </p>
      </div>
    </div>
  );
}
```

## 3. Checkout Components

### PaymentMethodSelector
```typescript
// components/features/PaymentMethodSelector.tsx
'use client'

import { useState } from 'react';
import { CreditCard, Smartphone } from 'lucide-react';
import { Card } from '@/components/ui/card';

type PaymentMethod = 'upi' | 'card';

interface PaymentMethodSelectorProps {
  selected: PaymentMethod;
  onSelect: (method: PaymentMethod) => void;
}

export function PaymentMethodSelector({ selected, onSelect }: PaymentMethodSelectorProps) {
  return (
    <div className="space-y-3">
      <h3 className="text-lg font-medium">Payment Method</h3>
      
      <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
        <Card
          className={`p-4 cursor-pointer transition-colors ${
            selected === 'upi' 
              ? 'border-blue-500 bg-blue-50' 
              : 'hover:border-gray-300'
          }`}
          onClick={() => onSelect('upi')}
        >
          <div className="flex items-center gap-3">
            <Smartphone className="h-6 w-6 text-blue-600" />
            <div>
              <p className="font-medium">UPI Payment</p>
              <p className="text-sm text-gray-600">Pay using UPI QR code</p>
            </div>
          </div>
        </Card>
        
        <Card
          className={`p-4 cursor-pointer transition-colors ${
            selected === 'card' 
              ? 'border-blue-500 bg-blue-50' 
              : 'hover:border-gray-300'
          }`}
          onClick={() => onSelect('card')}
        >
          <div className="flex items-center gap-3">
            <CreditCard className="h-6 w-6 text-green-600" />
            <div>
              <p className="font-medium">Credit/Debit Card</p>
              <p className="text-sm text-gray-600">Pay using your card</p>
            </div>
          </div>
        </Card>
      </div>
    </div>
  );
}
```

### UPIPayment Component
```typescript
// components/features/UPIPayment.tsx
'use client'

import { useState, useEffect } from 'react';
import { QRCodeSVG } from 'qrcode.react';
import { CheckCircle, Clock } from 'lucide-react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';

interface UPIPaymentProps {
  amount: number;
  upiId: string;
  orderId: string;
  onPaymentComplete: () => void;
}

export function UPIPayment({ amount, upiId, orderId, onPaymentComplete }: UPIPaymentProps) {
  const [paymentStatus, setPaymentStatus] = useState<'pending' | 'checking' | 'completed'>('pending');
  
  const upiUrl = `upi://pay?pa=${upiId}&am=${amount}&cu=INR&tn=Order%20${orderId}`;

  const handlePaymentCheck = () => {
    setPaymentStatus('checking');
    
    // Simulate payment verification (replace with actual verification)
    setTimeout(() => {
      setPaymentStatus('completed');
      onPaymentComplete();
    }, 3000);
  };

  return (
    <Card className="p-6">
      <div className="text-center space-y-4">
        <h3 className="text-xl font-semibold">Scan QR Code to Pay</h3>
        <p className="text-gray-600">Amount: ₹{amount.toLocaleString()}</p>
        
        <div className="flex justify-center">
          <div className="p-4 bg-white rounded-lg shadow-sm">
            <QRCodeSVG value={upiUrl} size={200} />
          </div>
        </div>
        
        <div className="space-y-2">
          <p className="text-sm text-gray-600">
            Scan this QR code with any UPI app
          </p>
          <p className="text-xs text-gray-500">
            UPI ID: {upiId}
          </p>
        </div>
        
        {paymentStatus === 'pending' && (
          <Button onClick={handlePaymentCheck} className="w-full">
            <Clock className="h-4 w-4 mr-2" />
            I have completed the payment
          </Button>
        )}
        
        {paymentStatus === 'checking' && (
          <div className="flex items-center justify-center gap-2 text-blue-600">
            <Clock className="h-4 w-4 animate-spin" />
            Verifying payment...
          </div>
        )}
        
        {paymentStatus === 'completed' && (
          <div className="flex items-center justify-center gap-2 text-green-600">
            <CheckCircle className="h-5 w-5" />
            Payment completed successfully!
          </div>
        )}
      </div>
    </Card>
  );
}
```

## 4. Layout Components

### Header Component
```typescript
// components/layout/Header.tsx
'use client'

import Link from 'next/link';
import { useState } from 'react';
import { Search, ShoppingCart, User, Menu, X } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { useCart } from '@/hooks/useCart';

export function Header() {
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const { itemCount } = useCart();

  return (
    <header className="bg-white shadow-sm border-b">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex items-center justify-between h-16">
          {/* Logo */}
          <Link href="/" className="flex items-center">
            <span className="text-xl font-bold text-gray-900">
              ECM Store
            </span>
          </Link>
          
          {/* Search Bar - Desktop */}
          <div className="hidden md:flex flex-1 max-w-md mx-8">
            <div className="relative w-full">
              <Input
                type="text"
                placeholder="Search products..."
                className="pr-10"
              />
              <Search className="absolute right-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
            </div>
          </div>
          
          {/* Actions */}
          <div className="flex items-center gap-4">
            <Link href="/cart">
              <Button variant="ghost" size="icon" className="relative">
                <ShoppingCart className="h-5 w-5" />
                {itemCount > 0 && (
                  <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center">
                    {itemCount}
                  </span>
                )}
              </Button>
            </Link>
            
            <Button variant="ghost" size="icon">
              <User className="h-5 w-5" />
            </Button>
            
            {/* Mobile Menu Button */}
            <Button
              variant="ghost"
              size="icon"
              className="md:hidden"
              onClick={() => setIsMenuOpen(!isMenuOpen)}
            >
              {isMenuOpen ? (
                <X className="h-5 w-5" />
              ) : (
                <Menu className="h-5 w-5" />
              )}
            </Button>
          </div>
        </div>
        
        {/* Mobile Menu */}
        {isMenuOpen && (
          <div className="md:hidden border-t py-4">
            <div className="space-y-3">
              <Input
                type="text"
                placeholder="Search products..."
                className="w-full"
              />
              <nav className="space-y-2">
                <Link href="/products" className="block py-2 text-gray-700">
                  Products
                </Link>
                <Link href="/categories" className="block py-2 text-gray-700">
                  Categories
                </Link>
                <Link href="/offers" className="block py-2 text-gray-700">
                  Offers
                </Link>
              </nav>
            </div>
          </div>
        )}
      </div>
    </header>
  );
}
```

## 5. Form Components

### AddressForm Component
```typescript
// components/forms/AddressForm.tsx
'use client'

import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';

const addressSchema = z.object({
  firstName: z.string().min(1, 'First name is required'),
  lastName: z.string().min(1, 'Last name is required'),
  email: z.string().email('Invalid email address'),
  phone: z.string().min(10, 'Phone number must be at least 10 digits'),
  address: z.string().min(1, 'Address is required'),
  city: z.string().min(1, 'City is required'),
  state: z.string().min(1, 'State is required'),
  zipCode: z.string().min(5, 'ZIP code must be at least 5 digits'),
});

type AddressFormData = z.infer<typeof addressSchema>;

interface AddressFormProps {
  onSubmit: (data: AddressFormData) => void;
  initialData?: Partial<AddressFormData>;
  loading?: boolean;
}

export function AddressForm({ onSubmit, initialData, loading }: AddressFormProps) {
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<AddressFormData>({
    resolver: zodResolver(addressSchema),
    defaultValues: initialData,
  });

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
      <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
        <div>
          <Label htmlFor="firstName">First Name</Label>
          <Input
            id="firstName"
            {...register('firstName')}
            error={errors.firstName?.message}
          />
        </div>
        
        <div>
          <Label htmlFor="lastName">Last Name</Label>
          <Input
            id="lastName"
            {...register('lastName')}
            error={errors.lastName?.message}
          />
        </div>
      </div>
      
      <div>
        <Label htmlFor="email">Email</Label>
        <Input
          id="email"
          type="email"
          {...register('email')}
          error={errors.email?.message}
        />
      </div>
      
      <div>
        <Label htmlFor="phone">Phone Number</Label>
        <Input
          id="phone"
          {...register('phone')}
          error={errors.phone?.message}
        />
      </div>
      
      <div>
        <Label htmlFor="address">Address</Label>
        <Textarea
          id="address"
          {...register('address')}
          error={errors.address?.message}
        />
      </div>
      
      <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
        <div>
          <Label htmlFor="city">City</Label>
          <Input
            id="city"
            {...register('city')}
            error={errors.city?.message}
          />
        </div>
        
        <div>
          <Label htmlFor="state">State</Label>
          <Input
            id="state"
            {...register('state')}
            error={errors.state?.message}
          />
        </div>
        
        <div>
          <Label htmlFor="zipCode">ZIP Code</Label>
          <Input
            id="zipCode"
            {...register('zipCode')}
            error={errors.zipCode?.message}
          />
        </div>
      </div>
      
      <Button type="submit" className="w-full" disabled={loading}>
        {loading ? 'Saving...' : 'Save Address'}
      </Button>
    </form>
  );
}
```
