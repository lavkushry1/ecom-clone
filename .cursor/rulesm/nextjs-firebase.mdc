---
description: Next.js 14+ with Firebase development guidelines
globs: "**/*.{js,jsx,ts,tsx,json}"
alwaysApply: true
---
# Next.js 14 + Firebase Development Rules

This document outlines key guidelines and patterns for developing e-commerce applications using Next.js (with the App Router) and Firebase.

## Project Structure (Illustrative)

```
src/
├── app/                    # Next.js App Router
│   ├── (main)/            # Main e-commerce pages (e.g., products, cart, checkout)
│   ├── admin/             # Admin panel routes
│   ├── api/               # API routes (for Server Actions or specific backend logic)
│   ├── layout.tsx         # Root layout
│   └── page.tsx           # Home page
├── components/            # Reusable UI components
│   ├── ui/                # Basic UI elements (e.g., from Shadcn/UI)
│   ├── forms/             # Form-specific components
│   ├── layout/            # Layout components (Header, Footer, Sidebar)
│   └── features/          # Components specific to features (e.g., ProductCard, CartView)
├── lib/
│   ├── firebase/          # Firebase configuration and core services
│   │   ├── config.ts      # Firebase client SDK initialization
│   │   ├── admin.ts       # Firebase admin SDK initialization (for server-side use)
│   │   └── services/      # Service classes for Firestore interactions (e.g., productService.ts)
│   ├── actions/           # Next.js Server Actions (using Firebase Admin SDK for DB operations)
│   ├── utils/             # General utility functions
│   ├── validations/       # Zod schemas for data validation
│   └── constants/         # Application-wide constants
├── hooks/                 # Custom React hooks (e.g., useCart, useAuth)
├── types/                 # TypeScript type definitions (e.g., Product, Order, User)
└── styles/                # Global styles, Tailwind config
```

## Firebase Integration

### 1. Configuration & Initialization

-   **Client SDK (`lib/firebase/config.ts`):** Initialize Firebase for client-side usage (Firestore, Auth, Storage client SDKs). Store Firebase config keys in environment variables prefixed with `NEXT_PUBLIC_`.
    ```typescript
    // lib/firebase/config.ts (Simplified Example)
    import { initializeApp, getApps, getApp } from 'firebase/app';
    import { getFirestore } from 'firebase/firestore';
    import { getAuth } from 'firebase/auth';
    // ... other services like getStorage

    const firebaseConfig = {
      apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
      authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
      projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
      // ... other config values
    };

    const app = !getApps().length ? initializeApp(firebaseConfig) : getApp();
    const db = getFirestore(app);
    const auth = getAuth(app);
    // export const storage = getStorage(app);

    export { app, db, auth };
    ```
-   **Admin SDK (`lib/firebase/admin.ts`):** Initialize Firebase Admin SDK for server-side operations (Server Actions, API routes, Cloud Functions). Store service account credentials securely in environment variables (not prefixed with `NEXT_PUBLIC_`).
    ```typescript
    // lib/firebase/admin.ts (Simplified Example)
    import * as admin from 'firebase-admin';

    if (!admin.apps.length) {
      admin.initializeApp({
        credential: admin.credential.cert({
          projectId: process.env.FIREBASE_ADMIN_PROJECT_ID,
          clientEmail: process.env.FIREBASE_ADMIN_CLIENT_EMAIL,
          privateKey: process.env.FIREBASE_ADMIN_PRIVATE_KEY?.replace(/\\n/g, '\n'),
        }),
        // databaseURL: 'https://<YOUR_PROJECT_ID>.firebaseio.com' // If using RTDB
      });
    }
    const adminDb = admin.firestore();
    const adminAuth = admin.auth();
    // export const adminStorage = admin.storage();

    export { adminDb, adminAuth };
    ```

### 2. Firestore Data Modeling & Services

-   Define clear TypeScript interfaces for your Firestore documents (e.g., `Product`, `Order`, `User` in `src/types/firebase.ts`).
-   Create service classes or modules in `lib/firebase/services/` to encapsulate Firestore CRUD operations (e.g., `productService.ts`, `orderService.ts`). These services should use the Firebase Admin SDK for server-side operations called from Server Actions or API routes, and can use the client SDK if direct client-side interaction is needed (though often abstracted via hooks or Server Components).
    ```typescript
    // Example: lib/firebase/services/productService.ts
    import { adminDb } from '@/lib/firebase/admin';
    import { Product } from '@/types/firebase'; // Your Product type
    import { CollectionReference, DocumentData } from 'firebase-admin/firestore';

    const productsCollection = adminDb.collection('products') as CollectionReference<Product>;

    export async function getProductById(productId: string): Promise<Product | null> {
      const docSnap = await productsCollection.doc(productId).get();
      if (!docSnap.exists) return null;
      return { id: docSnap.id, ...docSnap.data() } as Product;
    }
    // ... other product service functions (create, update, list with filters etc.)
    ```

### 3. Firebase Security Rules (`firestore.rules`)

-   Implement robust security rules to protect your data. Define rules based on user authentication status and roles.
    ```javascript
    // firestore.rules (Example Snippet)
    rules_version = '2';
    service cloud.firestore {
      match /databases/{database}/documents {
        // Products: Public read, admin write
        match /products/{productId} {
          allow read: if true;
          allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        }
        // User-specific data (e.g., cart, orders)
        match /users/{userId}/{document=**} {
          allow read, write: if request.auth != null && request.auth.uid == userId;
        }
        // Orders: User can create, user can read own, admin can read/write all
        match /orders/{orderId} {
          allow create: if request.auth != null; // Further checks on request.resource.data are needed
          allow read: if request.auth != null && (request.resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
          allow update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        }
        // Add other rules for categories, reviews, etc.
      }
    }
    ```

### 4. Firebase Storage (`storage.rules`)

-   Secure file uploads (e.g., product images, user avatars) with Firebase Storage rules.
    ```javascript
    // storage.rules (Example Snippet)
    rules_version = '2';
    service firebase.storage {
      match /b/{bucket}/o {
        // Product images: public read, admin write
        match /products/{productId}/{imageName} {
          allow read: if true;
          allow write: if request.auth != null && request.auth.token.admin == true; // Example using custom claim for admin
        }
        // User avatars: user can write to their own path
        match /users/{userId}/avatar.jpg {
          allow read: if true;
          allow write: if request.auth != null && request.auth.uid == userId;
        }
      }
    }
    ```

### 5. Cloud Functions (Optional but Recommended)

-   Use Firebase Cloud Functions for backend logic that doesn't fit well into Server Actions or API routes, such as:
    -   Responding to Firestore triggers (e.g., updating aggregated data when an order is created).
    -   Complex or long-running background tasks.
    -   Third-party API integrations that require secure credentials.
    -   Scheduled tasks.
-   Cloud Functions should use the Firebase Admin SDK.

## Next.js Best Practices with Firebase

### 1. Server Components & Data Fetching

-   Utilize Server Components for initial data loading directly from Firebase services (using Admin SDK).
    ```typescript
    // app/products/[id]/page.tsx (Server Component Example)
    import { getProductById } from '@/lib/firebase/services/productService';
    import ProductDetails from '@/components/features/ProductDetails';

    async function ProductPage({ params }: { params: { id: string } }) {
      const product = await getProductById(params.id);
      if (!product) return <div>Product not found</div>;
      return <ProductDetails product={product} />;
    }
    export default ProductPage;
    ```
-   For client-side data fetching or real-time updates, use hooks (e.g., `useSWR` with Next.js API routes that call Firebase services, or custom hooks directly using Firebase Client SDK for `onSnapshot`). Refer to `data-fetching.mdc`.

### 2. Server Actions

-   Use Server Actions for mutations (form submissions, creating/updating data).
-   Server Actions **must** use the Firebase Admin SDK for database operations to ensure security and proper permissions.
-   Validate inputs using Zod schemas within Server Actions.
    ```typescript
    // lib/actions/cartActions.ts (Server Action Example)
    'use server';
    import { adminDb } from '@/lib/firebase/admin';
    import { z } from 'zod';
    import { revalidatePath } from 'next/cache';
    // ... other imports

    const addToCartSchema = z.object({ productId: z.string(), quantity: z.number().min(1) });

    export async function addToCartAction(userId: string, formData: FormData) {
      const rawData = {
        productId: formData.get('productId'),
        quantity: Number(formData.get('quantity')),
      };
      const validation = addToCartSchema.safeParse(rawData);
      if (!validation.success) return { error: 'Invalid input' };

      const { productId, quantity } = validation.data;
      // Logic to add to cart in Firestore using adminDb.collection('users').doc(userId).collection('cart')... 
      // Ensure to handle product stock checks and other business logic.
      // Example: await adminDb.doc(`users/${userId}/cart/${productId}`).set({ quantity, addedAt: admin.firestore.FieldValue.serverTimestamp() }, { merge: true });
      revalidatePath('/cart');
      return { success: true };
    }
    ```

### 3. API Routes (App Router)

-   Use API Route Handlers (`app/api/.../route.ts`) for scenarios where Server Actions are not suitable, or for creating dedicated backend endpoints (e.g., webhook handlers, specific data processing endpoints).
-   API Routes that interact with Firebase should use the Firebase Admin SDK.

## Component Guidelines

-   **Structure:** Organize components into `ui` (basic elements), `forms`, `layout`, and `features` (domain-specific).
-   **State Management:**
    -   Use React's built-in state (`useState`, `useReducer`) for local component state.
    -   Employ React Context API for global state like authentication status or theme.
    -   For complex client-side state (e.g., cart management before syncing), custom hooks interacting with Firebase (Client SDK) or localStorage are preferred.
-   **Forms:** Use libraries like React Hook Form with Zod for validation. Submissions should typically go through Server Actions.

## Styling

-   Primarily use Tailwind CSS for utility-first styling.
-   Leverage Shadcn/UI for pre-built, accessible components that can be customized.
-   Define theme colors and global styles in `tailwind.config.js` and `src/styles/globals.css`.

## Error Handling

-   **Server-Side (Server Actions, API Routes):** Implement try-catch blocks. Return structured error responses.
-   **Client-Side:** Use error boundaries for component-level errors. Display user-friendly messages. Log errors for debugging.

## Performance

-   Use Next.js Image component (`next/image`) for optimized image delivery.
-   Implement code-splitting with dynamic imports (`next/dynamic`) for large components or sections not immediately visible.
-   Optimize Firestore queries: fetch only necessary data, use pagination, and leverage indexing.
-   Consider Next.js caching strategies (Full Route Cache, Data Cache) where appropriate, and use `revalidatePath` or `revalidateTag` in Server Actions to update caches.

## Security

-   **Authentication:** Utilize Firebase Authentication for user sign-up, sign-in, and session management.
-   **Authorization:** Enforce access control through Firebase Security Rules (Firestore & Storage) and by validating user roles/permissions in server-side logic (Server Actions, API Routes using Admin SDK).
-   **Data Validation:** Validate all inputs on the client-side (for UX) and rigorously on the server-side (Server Actions, API Routes) using Zod.
-   **Environment Variables:** Store all sensitive keys and configurations in environment variables. Never hardcode them.

## Testing

-   **Unit Tests (Vitest/Jest):** Test utility functions, custom hooks, and individual component logic. Mock Firebase SDK calls where necessary.
-   **Integration Tests:** Test Server Actions and API Routes, possibly using Firebase Emulators.
-   **E2E Tests (Cypress/Playwright):** Test critical user flows (e.g., product browsing, add to cart, checkout).
-   **Firebase Emulators:** Use Firebase Emulators Suite for local development and testing of Firestore, Auth, Functions, and Storage to avoid interacting with live Firebase services during development.

By adhering to these guidelines, you can build a robust, scalable, and maintainable e-commerce platform with Next.js and Firebase.
