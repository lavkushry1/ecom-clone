---
description: Server Actions for Next.js + Firebase e-commerce
globs: "**/actions/**"
alwaysApply: false
---
# Server Actions for E-commerce

## 1. Product Actions

```typescript
// lib/actions/productActions.ts
'use server'

import { revalidatePath } from 'next/cache';
import { redirect } from 'next/navigation';
import { z } from 'zod';
import { adminDb } from '@/lib/firebase/admin';
import { Product } from '@/types/firebase';

const productSchema = z.object({
  name: z.string().min(1, 'Product name is required'),
  description: z.string().min(1, 'Description is required'),
  price: z.number().min(0, 'Price must be positive'),
  originalPrice: z.number().optional(),
  category: z.string().min(1, 'Category is required'),
  stock: z.number().min(0, 'Stock must be positive'),
  featured: z.boolean().default(false),
  tags: z.array(z.string()).default([]),
  images: z.array(z.string()).min(1, 'At least one image is required'),
});

export async function createProduct(formData: FormData) {
  try {
    const rawData = {
      name: formData.get('name') as string,
      description: formData.get('description') as string,
      price: Number(formData.get('price')),
      originalPrice: formData.get('originalPrice') ? Number(formData.get('originalPrice')) : undefined,
      category: formData.get('category') as string,
      stock: Number(formData.get('stock')),
      featured: formData.get('featured') === 'true',
      tags: formData.get('tags') ? (formData.get('tags') as string).split(',').map(tag => tag.trim()) : [],
      images: formData.getAll('images') as string[],
    };

    const validatedData = productSchema.parse(rawData);

    const productRef = adminDb.collection('products').doc();
    await productRef.set({
      ...validatedData,
      createdAt: new Date(),
      updatedAt: new Date(),
    });

    revalidatePath('/admin/products');
    revalidatePath('/products');
    
    return { success: true, id: productRef.id };
  } catch (error) {
    console.error('Error creating product:', error);
    if (error instanceof z.ZodError) {
      return { success: false, errors: error.flatten().fieldErrors };
    }
    return { success: false, error: 'Failed to create product' };
  }
}
```

## 2. Order Actions

```typescript
// lib/actions/orderActions.ts
'use server'

import { revalidatePath } from 'next/cache';
import { z } from 'zod';
import { adminDb } from '@/lib/firebase/admin';
import { generateTrackingNumber } from '@/lib/utils/tracking';

const orderSchema = z.object({
  items: z.array(z.object({
    productId: z.string(),
    name: z.string(),
    price: z.number(),
    quantity: z.number(),
    image: z.string().optional(),
  })),
  totalAmount: z.number().min(0),
  shippingAddress: z.object({
    firstName: z.string().min(1),
    lastName: z.string().min(1),
    email: z.string().email(),
    phone: z.string().min(10),
    address: z.string().min(1),
    city: z.string().min(1),
    state: z.string().min(1),
    zipCode: z.string().min(5),
  }),
  paymentMethod: z.enum(['upi', 'card']),
  userId: z.string().optional(),
  sessionId: z.string().optional(),
});

export async function createOrder(formData: FormData) {
  try {
    const rawData = {
      items: JSON.parse(formData.get('items') as string),
      totalAmount: Number(formData.get('totalAmount')),
      shippingAddress: JSON.parse(formData.get('shippingAddress') as string),
      paymentMethod: formData.get('paymentMethod') as 'upi' | 'card',
      userId: formData.get('userId') as string || undefined,
      sessionId: formData.get('sessionId') as string || undefined,
    };

    const validatedData = orderSchema.parse(rawData);

    const orderRef = adminDb.collection('orders').doc();
    const trackingNumber = generateTrackingNumber();

    await orderRef.set({
      ...validatedData,
      status: 'pending',
      paymentStatus: 'pending',
      trackingNumber,
      createdAt: new Date(),
      updatedAt: new Date(),
    });

    // Update product stock
    for (const item of validatedData.items) {
      const productRef = adminDb.collection('products').doc(item.productId);
      await productRef.update({
        stock: adminDb.FieldValue.increment(-item.quantity),
      });
    }

    revalidatePath('/admin/orders');
    
    return { success: true, orderId: orderRef.id, trackingNumber };
  } catch (error) {
    console.error('Error creating order:', error);
    if (error instanceof z.ZodError) {
      return { success: false, errors: error.flatten().fieldErrors };
    }
    return { success: false, error: 'Failed to create order' };
  }
}
```

## Usage Guidelines

### 1. Error Handling
- Always wrap Server Actions in try-catch blocks
- Use Zod for input validation
- Return consistent response format: `{ success: boolean, data?, error?, errors? }`

### 2. Revalidation
- Use `revalidatePath()` to update cached pages after data changes
- Revalidate both admin and public pages when necessary

### 3. Security
- Validate all inputs on the server side
- Use Firebase Admin SDK for privileged operations
- Implement proper authentication checks for admin actions
- `apps/web/utils/actions/NAME.validation.ts`
- `apps/web/utils/actions/NAME.ts`

For `apps/web/utils/actions/NAME.validation.ts`:

```typescript
import { z } from "zod";

// Example: Schema for updating User Settings
export const saveUserSettingsBody = z.object({
  displayName: z.string().min(3, "Display name must be at least 3 characters").optional(),
  themePreference: z.enum(["light", "dark", "system"]).optional(),
  // Add other user settings fields here as needed
});
export type SaveUserSettingsBody = z.infer<typeof saveUserSettingsBody>;

// You can include other Zod schema examples or general validation advice below if relevant.
// For example, if you had another schema:
// export const someOtherActionBody = z.object({ ... });
// export type SomeOtherActionBody = z.infer<typeof someOtherActionBody>;
```

For `apps/web/utils/actions/NAME.ts`:

```typescript
"use server";

import { actionClientUser } from "@/utils/actions/safe-action"; // Assuming your safe-action client setup
import { saveUserSettingsBody } from "@/utils/actions/settings.validation"; // Adjust path to your validation file accordingly
import { adminDb } from "@/lib/firebase/admin"; // Import your Firebase Admin SDK initialized instance
import { revalidatePath } from "next/cache";
import { FieldValue } from 'firebase-admin/firestore'; // Import FieldValue for serverTimestamp

// Example using actionClientUser (requires authenticated user context)
// This action updates user settings in Firestore.
export const updateUserSettingsAction = actionClientUser
  .metadata({ name: "updateUserSettings" }) // Useful for logging/instrumentation
  .schema(saveUserSettingsBody) // Apply Zod schema for input validation
  .action(
    async ({
      ctx: { userId }, // Access userId from the context provided by actionClientUser
      parsedInput, // Contains validated and typed input (e.g., { displayName, themePreference })
    }) => {
      const userRef = adminDb.collection('users').doc(userId);
      
      // Prepare data for Firestore. Only include fields that are actually provided in the input
      // to avoid overwriting existing fields with undefined.
      const updateData: { [key: string]: any } = {};
      if (parsedInput.displayName !== undefined) {
        updateData.displayName = parsedInput.displayName;
      }
      if (parsedInput.themePreference !== undefined) {
        updateData.themePreference = parsedInput.themePreference;
      }
      // Add other updatable fields from parsedInput here

      if (Object.keys(updateData).length === 0) {
        // No actual data fields were provided for update
        // You could return an error or a specific success message
        // return { serverError: "No settings provided to update." }; 
        return { success: true, message: "No settings were changed as no new values were provided." };
      }

      // Add a timestamp for when the document was last updated
      updateData.updatedAt = FieldValue.serverTimestamp();

      try {
        await userRef.update(updateData);

        // Revalidate relevant paths if these settings affect data displayed on cached pages
        revalidatePath(`/profile`); // Or a more specific path like `/profile/${userId}`
        revalidatePath('/settings/account');
        
        return { success: true, message: "User settings updated successfully." };
      } catch (error) {
        console.error("Error updating user settings:", error);
        // Handle potential errors, e.g., Firestore write errors
        return { serverError: "Failed to update user settings. Please try again." };
      }
    },
  );

// You can add other server action examples here, ensuring they use Firebase Admin SDK for database operations.
// For instance, an action that might use the more generic 'actionClient' (if it needs entityId bound from client):
/*
import { actionClient } from "@/utils/actions/safe-action";
import { someOtherActionBody } from "@/utils/actions/someAction.validation";

export const manageEntityAction = actionClient
  .metadata({ name: "manageEntityAction" })
  .schema(someOtherActionBody)
  .action(async ({ ctx: { userId, entityId }, parsedInput }) => {
    // ... logic using adminDb to interact with Firestore based on userId and entityId
    // Example: const entityRef = adminDb.collection('entities').doc(entityId);
    // await entityRef.set({ ...parsedInput, ownerId: userId, updatedAt: FieldValue.serverTimestamp() });
    // revalidatePath(`/entities/${entityId}`);
    return { success: true, message: "Entity managed successfully." };
  });
*/
```

## Implementation Guidelines
- **Use `next-safe-action`:** Implement all server actions using the `next-safe-action` library for type safety, input validation, context management, and error handling. Refer to `apps/web/utils/actions/safe-action.ts` for client definitions (`actionClient`, `actionClientUser`, `adminActionClient`).
- **Choose the Right Client:**
    - `actionClientUser`: Use when only authenticated user context (`userId`) is needed.
    - `actionClient`: Use when both authenticated user context *and* a specific ID (e.g., `entityId`, `documentId`) are needed, which should be bound when calling the action from the client.
    - `adminActionClient`: Use for actions restricted to admin users (ensure your `adminActionClient` correctly verifies admin status, possibly by checking a custom claim or a role in Firestore).
- **Database Interaction:** All database operations within Server Actions **must** use the **Firebase Admin SDK** (e.g., `adminDb.collection('yourCollection').doc('yourDoc').set({...})`).
- **Input Validation:** Define input validation schemas using Zod in the corresponding `.validation.ts` file. These schemas are used by `next-safe-action` (`.schema()`) and can also be reused on the client for form validation.
- **Context (`ctx`):** Access necessary context (like `userId`, or other bound IDs like `entityId`) provided by the safe action client via the `ctx` object in the `.action()` handler.
- **Mutations Only:** Server Actions are **strictly for mutations** (operations that change data, e.g., creating, updating, deleting). **Do NOT use Server Actions for data fetching (GET operations).**
    - For data fetching, use dedicated [GET API Routes](mdc:.cursor/rules/get-api-route.mdc) (which can use Firebase Admin SDK) combined with client-side fetching libraries like SWR, or use Firebase Client SDK directly in client components as per [data-fetching.mdc](mdc:.cursor/rules/data-fetching.mdc).
- **Error Handling:** `next-safe-action` provides centralized error handling. Use `SafeError` for expected/handled errors within actions if needed. Ensure your actions return appropriate `serverError` messages for client-side feedback.
- **Instrumentation:** Sentry instrumentation is automatically applied via `withServerActionInstrumentation` within the safe action clients (if configured). Use the `.metadata({ name: "actionName" })` method to provide a meaningful name for monitoring.
- **Cache Invalidation:** If an action modifies data displayed elsewhere, use `revalidatePath` or `revalidateTag` from `next/cache` within the action handler as needed to update stale data.