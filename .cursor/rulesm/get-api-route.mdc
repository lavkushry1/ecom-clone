---
description: Guidelines for implementing GET API routes in Next.js
globs: 
alwaysApply: false
---
# GET API Route Guidelines

Guidelines for implementing GET API routes in Next.js App Router:

Basic Structure. Note how we auto generate the response type for use on the client:

```typescript
import { NextResponse } from "next/server";
import { adminDb } from "@/lib/firebase/admin";
import { withAuth } from "@/utils/middleware";

export type GetExampleResponse = Awaited<ReturnType<typeof getData>>;

export const GET = withAuth(async (request) => {
  const userId = request.auth?.userId;

  if (!userId) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  try {
    const result = await getData({ userId });
    return NextResponse.json(result);
  } catch (error) {
    console.error("Error in GET /api/example:", error);
    return NextResponse.json({ error: "Failed to fetch data" }, { status: 500 });
  }
});

async function getData({ userId }: { userId: string }) {
  const itemsCollectionRef = adminDb.collection(`users/${userId}/items`);
  const snapshot = await itemsCollectionRef.orderBy("createdAt", "desc").get();

  if (snapshot.empty) {
    return { items: [] };
  }

  const items = snapshot.docs.map(doc => ({
    id: doc.id,
    ...doc.data(),
  }));

  return { items };
}
```

See [data-fetching.mdc](mdc:.cursor/rules/data-fetching.mdc) as to how this would be then used on the client.

Key Requirements:

   - Always wrap the handler with `withAuth` for consistent error handling and authentication.
   - We don't need try/catch in the main GET handler if `withAuth` handles that comprehensively, but it's shown here for clarity in `getData`.
   - Infer and export response type.
   - Use **Firebase Admin SDK** (`adminDb`) for database queries from Firestore.
   - Return responses using `NextResponse.json()`
