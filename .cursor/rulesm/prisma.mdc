---
description: 
globs: 
alwaysApply: true
---
# Prisma Usage

We use PostgreSQL.

This is how we import prisma in the project:

```typescript
import prisma from "@/utils/prisma";
```

The prisma file is located at: `apps/web/prisma/schema.prisma`.

# Firebase Data Persistence

We use Firebase (Firestore or Realtime Database) for data persistence.

This is how we initialize and use Firebase in the project:

**Client-side (e.g., in a Next.js app):**
```typescript
// src/lib/firebaseClient.ts (example)
import { initializeApp, getApp, getApps } from "firebase/app";
import { getFirestore } from "firebase/firestore";
import { getAuth } from "firebase/auth";
// import { getDatabase } from "firebase/database"; // For Realtime Database
// import { getStorage } from "firebase/storage"; // For Firebase Storage
// import { getFunctions } from "firebase/functions"; // For Cloud Functions

const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,
};

let app;
if (!getApps().length) {
  app = initializeApp(firebaseConfig);
} else {
  app = getApp();
}

const db = getFirestore(app);
const auth = getAuth(app);
// const rtdb = getDatabase(app); // For Realtime Database
// const storage = getStorage(app); // For Firebase Storage
// const functions = getFunctions(app); // For Cloud Functions

export { app, db, auth /*, rtdb, storage, functions */ };

// Usage in a component/page:
// import { db } from '@/lib/firebaseClient';
// import { collection, getDocs } from 'firebase/firestore';
// const querySnapshot = await getDocs(collection(db, "users"));
```

**Server-side (e.g., Firebase Cloud Functions or Next.js API routes/Server Actions if using Admin SDK):**
```typescript
// src/lib/firebaseAdmin.ts (example for Admin SDK)
// This file should ideally be used within Firebase Cloud Functions or secure backend environments.
// Avoid bundling Admin SDK directly into client-side Next.js code.
import * as admin from 'firebase-admin';

if (!admin.apps.length) {
  // Ensure environment variables for service account are set in the deployment environment
  // or load from a service account key JSON file (less secure for some environments)
  admin.initializeApp({
    // credential: admin.credential.cert(require('./path/to/serviceAccountKey.json')), // If using a key file
    // databaseURL: 'https://your-project-id.firebaseio.com' // if using RTDB
  });
}

const adminDb = admin.firestore();
const adminAuth = admin.auth();
// const adminRtdb = admin.database();

export { adminDb, adminAuth /*, adminRtdb */ };

// Usage in a Cloud Function:
// import { adminDb } from './firebaseAdmin';
// const usersRef = adminDb.collection('users');
```

The Firebase configuration files are typically located at:
- Client-side: `src/lib/firebaseClient.ts` (or similar)
- Admin SDK (for backend/Cloud Functions): `src/lib/firebaseAdmin.ts` (or often initialized directly within `functions/index.ts` or similar in a Firebase project).

Firebase Security Rules for Firestore/Realtime Database/Storage are crucial for securing your data and should be defined in `firestore.rules`, `database.rules.json`, and `storage.rules` respectively within your Firebase project.